// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createCard = `-- name: CreateCard :exec
INSERT INTO card (language_1, language_2, description, desk_id) VALUES ($1, $2, $3, $4)
`

type CreateCardParams struct {
	Language1   string
	Language2   string
	Description string
	DeskID      int32
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) error {
	_, err := q.db.ExecContext(ctx, createCard,
		arg.Language1,
		arg.Language2,
		arg.Description,
		arg.DeskID,
	)
	return err
}

const createDesk = `-- name: CreateDesk :exec
INSERT INTO desk (title, description, user_id) VALUES ($1, $2, $3)
`

type CreateDeskParams struct {
	Title       string
	Description string
	UserID      int32
}

func (q *Queries) CreateDesk(ctx context.Context, arg CreateDeskParams) error {
	_, err := q.db.ExecContext(ctx, createDesk, arg.Title, arg.Description, arg.UserID)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, password) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	return err
}

const deleteCard = `-- name: DeleteCard :exec
DELETE FROM card WHERE id = $1
`

func (q *Queries) DeleteCard(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCard, id)
	return err
}

const deleteDesk = `-- name: DeleteDesk :exec
DELETE FROM desk WHERE id = $1
`

func (q *Queries) DeleteDesk(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDesk, id)
	return err
}

const getCardById = `-- name: GetCardById :one
SELECT id, language_1, language_2, description, desk_id FROM card WHERE id = $1
`

// Card-related queries
func (q *Queries) GetCardById(ctx context.Context, id int32) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCardById, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Language1,
		&i.Language2,
		&i.Description,
		&i.DeskID,
	)
	return i, err
}

const getCardsByDeskId = `-- name: GetCardsByDeskId :many
SELECT id, language_1, language_2, description, desk_id FROM card WHERE desk_id = $1
`

func (q *Queries) GetCardsByDeskId(ctx context.Context, deskID int32) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, getCardsByDeskId, deskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Language1,
			&i.Language2,
			&i.Description,
			&i.DeskID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeskById = `-- name: GetDeskById :one
SELECT id, title, description, user_id FROM desk WHERE id = $1
`

// Desk-related queries
func (q *Queries) GetDeskById(ctx context.Context, id int32) (Desk, error) {
	row := q.db.QueryRowContext(ctx, getDeskById, id)
	var i Desk
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const getDesksByUserId = `-- name: GetDesksByUserId :many
SELECT id, title, description, user_id FROM desk WHERE user_id = $1
`

func (q *Queries) GetDesksByUserId(ctx context.Context, userID int32) ([]Desk, error) {
	rows, err := q.db.QueryContext(ctx, getDesksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Desk
	for rows.Next() {
		var i Desk
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password FROM users WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       int32
	Name     string
	Email    string
	Password string
}

// User-related queries
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const isUserVerified = `-- name: IsUserVerified :one
SELECT is_verified FROM users WHERE email = $1
`

func (q *Queries) IsUserVerified(ctx context.Context, email string) (sql.NullBool, error) {
	row := q.db.QueryRowContext(ctx, isUserVerified, email)
	var is_verified sql.NullBool
	err := row.Scan(&is_verified)
	return is_verified, err
}

const setUserVerificationCode = `-- name: SetUserVerificationCode :exec
UPDATE users SET verification_code = $1 WHERE email = $2
`

type SetUserVerificationCodeParams struct {
	VerificationCode sql.NullString
	Email            string
}

func (q *Queries) SetUserVerificationCode(ctx context.Context, arg SetUserVerificationCodeParams) error {
	_, err := q.db.ExecContext(ctx, setUserVerificationCode, arg.VerificationCode, arg.Email)
	return err
}

const updateCard = `-- name: UpdateCard :exec
UPDATE card SET language_1 = $1, language_2 = $2, description = $3 WHERE id = $4
`

type UpdateCardParams struct {
	Language1   string
	Language2   string
	Description string
	ID          int32
}

func (q *Queries) UpdateCard(ctx context.Context, arg UpdateCardParams) error {
	_, err := q.db.ExecContext(ctx, updateCard,
		arg.Language1,
		arg.Language2,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateDesk = `-- name: UpdateDesk :exec
UPDATE desk SET title = $1, description = $2 WHERE id = $3
`

type UpdateDeskParams struct {
	Title       string
	Description string
	ID          int32
}

func (q *Queries) UpdateDesk(ctx context.Context, arg UpdateDeskParams) error {
	_, err := q.db.ExecContext(ctx, updateDesk, arg.Title, arg.Description, arg.ID)
	return err
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE users SET name = $1, email = $2 WHERE id = $3
`

type UpdateUserInfoParams struct {
	Name  string
	Email string
	ID    int32
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo, arg.Name, arg.Email, arg.ID)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $1 WHERE email = $2
`

type UpdateUserPasswordParams struct {
	Password string
	Email    string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.Email)
	return err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET is_verified = TRUE WHERE email = $1 AND verification_code = $2
`

type VerifyUserParams struct {
	Email            string
	VerificationCode sql.NullString
}

func (q *Queries) VerifyUser(ctx context.Context, arg VerifyUserParams) error {
	_, err := q.db.ExecContext(ctx, verifyUser, arg.Email, arg.VerificationCode)
	return err
}
